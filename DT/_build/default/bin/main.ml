(* open DT *)

let () =
  let dataset = [
    (1.0, 1.0); (2.0, 1.5); (1.5, 2.0);  (* bottom-left quadrant → class 0 *)
    (1.0, 9.0); (2.0, 8.5); (1.5, 7.5);  (* top-left quadrant    → class 1 *)
    (8.0, 1.0); (9.0, 1.5); (7.5, 2.0);  (* bottom-right         → class 1 *)
    (8.0, 9.0); (9.0, 8.0); (7.5, 7.5);  (* top-right            → class 0 *)
    (5.0, 5.0); (5.5, 5.5); (4.5, 4.5)   (* center cluster       → class 0 *)
  ] in
  let labels = [
    0; 0; 0;
    1; 1; 1;
    1; 1; 1;
    0; 0; 0;
    0; 0; 0
  ] in
  let tree = DT.DecisionTree2D.build_tree (dataset, labels) 0 3 in
  let test_points = [(2.5, 2.5); (7.0,3.0); (7.5, 9.0); (0.5,9.5); (5.0, 5.0)] in
  List.iter (fun pt ->
    let label = DT.DecisionTree2D.predict tree pt in
    Printf.printf "Point (%f, %f) => Class %d\n" (fst pt) (snd pt) label
  ) test_points;
  let mesh = { DT.Display2D.x_min = 0.0; y_min = 0.0; x_max = 10.0; y_max = 10.0; x_unit = 0.5; y_unit = 0.5 } in
  let _ = DT.Display2D.plot_DT mesh (fun pt ->float_of_int(DT.DecisionTree2D.predict tree pt)) DT.Display2D.dict_demo in ();

  let dataset_arr = List.map (fun (x,y) -> [|x;y|]) dataset in
  let tree_arr = DT.DecisionTree.build_tree (dataset_arr, labels) 0 3 in
  let test_points_arr = List.map (fun (x,y) -> [|x;y|]) test_points in
  List.iter (fun pt ->
    let label = DT.DecisionTree.predict tree_arr pt in
    Printf.printf "Point (%f, %f) => Class %d\n" (pt.(0)) (pt.(1)) label
  ) test_points_arr;
  let convert_point (x,y) = [|x;y|] in
  let _ = DT.Display2D.plot_DT mesh (fun pt ->float_of_int(DT.DecisionTree.predict tree_arr (convert_point pt))) DT.Display2D.dict_demo in ();

  let points_spiral = [
    (0.0,0.0); (0.28660094673768177,0.08865606199840186); (0.49520136894580696,0.3387854840370212); (0.559448971443598,0.7049942186647349); (0.4348293053720083,1.1184469031606714); (0.10610580250155435,1.4962424799060816); (-0.40896377044755633,1.7529257355807513); (-1.060176819659701,1.8127396699626348); (-1.769744917298989,1.6211116333227622); (-2.4409947834460644,1.1539256766313413); 
    (-2.9699774898013365,0.4233600241796016); (-3.258683240699254,-0.5205607906727191); (-3.2283302988029297,-1.5930735958614672); (-2.8311359863805468,-2.6822880208174977); (-2.0590954496309375,-3.6606182441370705); (-0.9485810974385086,-4.3988855294929365); (0.4199951205093427,-4.781590122412035); (1.927686487836199,-4.721654879871435); (3.4273415300902226,-4.172928232802334); (4.7578628735832105,-3.138907592806534); 
    (5.761021719902196,-1.6764929891935552); (6.299109409215515,0.10592757305140474); (6.271535106926295,2.0561729991882953); (5.628503190864965,3.9912343742785774); (4.380129464632236,5.7144086197138995); (2.599764883762692,7.034999825810542); (0.4208522803886661,7.788638093921919); (-1.97270764525991,7.856107467845199); (-4.36202469458016,7.178630827941555); (-6.513225816697369,5.767832301714993); 
    (-8.200172356962094,3.7090663671758075); (-9.22769552670921,1.1574261386156879); (-9.453003415623618,-1.6735370997406067); (-8.802992410991072,-4.529605348375684); (-7.28550965067744,-7.138721813454134); (-4.993137743957919,-9.236805479702538); (-2.0987629897176316,-10.594111284718105); (1.157019898209238,-11.03953372906428); (4.485795876365959,-10.480345192577301); (7.57687716225035,-8.915207931852686); 
    (10.126247504789907,-6.438875016005216); (11.866211200005294,-3.23775103379937); (12.59287577731266,0.42365039498632845); (12.1886944922622,4.2244202648762466); (10.637668240853944,7.815370394135348); (8.031428954683536,10.851089758446886); (4.565245315696864,13.02300023832864); (0.5239332255506454,14.09026238134564); (-3.7413699294780653,13.9054719823096); (-7.843690482860036,12.43247841780113); 
    (-0.0,-0.0); (-0.28660094673768177,-0.08865606199840186); (-0.49520136894580696,-0.3387854840370212); (-0.559448971443598,-0.7049942186647349); (-0.4348293053720083,-1.1184469031606714); (-0.10610580250155435,-1.4962424799060816); (0.40896377044755633,-1.7529257355807513); (1.060176819659701,-1.8127396699626348); (1.769744917298989,-1.6211116333227622); (2.4409947834460644,-1.1539256766313413); 
    (2.9699774898013365,-0.4233600241796016); (3.258683240699254,0.5205607906727191); (3.2283302988029297,1.5930735958614672); (2.8311359863805468,2.6822880208174977); (2.0590954496309375,3.6606182441370705); (0.9485810974385086,4.3988855294929365); (-0.4199951205093427,4.781590122412035); (-1.927686487836199,4.721654879871435); (-3.4273415300902226,4.172928232802334); (-4.7578628735832105,3.138907592806534); 
    (-5.761021719902196,1.6764929891935552); (-6.299109409215515,-0.10592757305140474); (-6.271535106926295,-2.0561729991882953); (-5.628503190864965,-3.9912343742785774); (-4.380129464632236,-5.7144086197138995); (-2.599764883762692,-7.034999825810542); (-0.4208522803886661,-7.788638093921919); (1.97270764525991,-7.856107467845199); (4.36202469458016,-7.178630827941555); (6.513225816697369,-5.767832301714993); 
    (8.200172356962094,-3.7090663671758075); (9.22769552670921,-1.1574261386156879); (9.453003415623618,1.6735370997406067); (8.802992410991072,4.529605348375684); (7.28550965067744,7.138721813454134); (4.993137743957919,9.236805479702538); (2.0987629897176316,10.594111284718105); (-1.157019898209238,11.03953372906428); (-4.485795876365959,10.480345192577301); (-7.57687716225035,8.915207931852686); 
    (-10.126247504789907,6.438875016005216); (-11.866211200005294,3.23775103379937); (-12.59287577731266,-0.42365039498632845); (-12.1886944922622,-4.2244202648762466); (-10.637668240853944,-7.815370394135348); (-8.031428954683536,-10.851089758446886); (-4.565245315696864,-13.02300023832864); (-0.5239332255506454,-14.09026238134564); (3.7413699294780653,-13.9054719823096); (7.843690482860036,-12.43247841780113); 
  ] in
  let labels_spiral = [0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;] in
  let dataset_spiral = List.map (fun (x,y) -> [|x;y|]) points_spiral in
  let forest = DT.RandomForest.train_forest (dataset_spiral, labels_spiral) (DT.RandomForest.Ratio 0.4) 20 20 in
  List.iter (fun pt ->
    let label = DT.RandomForest.predict_forest forest pt in
    Printf.printf "Point (%f, %f) => Class %d\n" (pt.(0)) (pt.(1)) label
  ) test_points_arr;
  let mesh_spiral = { DT.Display2D.x_min = -20.0; y_min = -20.0; x_max = 20.0; y_max = 20.0; x_unit = 0.5; y_unit = 0.5 } in
  let _ = DT.Display2D.plot_DT mesh_spiral (fun pt ->float_of_int(DT.RandomForest.predict_forest forest (convert_point pt))) DT.Display2D.dict_demo in ();
